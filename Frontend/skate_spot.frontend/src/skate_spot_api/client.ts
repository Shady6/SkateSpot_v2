/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    seed_Fake_Spots(authorization: string): Promise<void> {
        let url_ = this.baseUrl + "/api/admin/seed";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSeed_Fake_Spots(_response);
        });
    }

    protected processSeed_Fake_Spots(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    comment(subjectType: CommentSubjectType, subjectId: string, authorization: string, body: CommentCommand | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/{subjectType}/{subjectId}/comments";
        if (subjectType === undefined || subjectType === null)
            throw new Error("The parameter 'subjectType' must be defined.");
        url_ = url_.replace("{subjectType}", encodeURIComponent("" + subjectType));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processComment(_response);
        });
    }

    protected processComment(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    edit_Comment(subjectType: CommentSubjectType, subjectId: string, commentId: string, authorization: string, body: EditCommentCommand | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/{subjectType}/{subjectId}/comments/{commentId}";
        if (subjectType === undefined || subjectType === null)
            throw new Error("The parameter 'subjectType' must be defined.");
        url_ = url_.replace("{subjectType}", encodeURIComponent("" + subjectType));
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{subjectId}", encodeURIComponent("" + subjectId));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{commentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEdit_Comment(_response);
        });
    }

    protected processEdit_Comment(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    delete_Comment(subjectId: string, subjectType: CommentSubjectType, commentId: string, authorization: string): Promise<void> {
        let url_ = this.baseUrl + "/api/{subjectType}/{subjectId}/comments/{commentId}";
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{SubjectId}", encodeURIComponent("" + subjectId));
        if (subjectType === undefined || subjectType === null)
            throw new Error("The parameter 'subjectType' must be defined.");
        url_ = url_.replace("{SubjectType}", encodeURIComponent("" + subjectType));
        if (commentId === undefined || commentId === null)
            throw new Error("The parameter 'commentId' must be defined.");
        url_ = url_.replace("{CommentId}", encodeURIComponent("" + commentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete_Comment(_response);
        });
    }

    protected processDelete_Comment(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    get_Token(body: TokenRequest | undefined): Promise<TokenResponse> {
        let url_ = this.baseUrl + "/api/identity/token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_Token(_response);
        });
    }

    protected processGet_Token(response: Response): Promise<TokenResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/identity/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param userId (optional) 
     * @param code (optional) 
     * @return Success
     */
    confirm_Email(userId: string | undefined, code: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/identity/confirm-email?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConfirm_Email(_response);
        });
    }

    protected processConfirm_Email(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    forgot_Password(body: ForgotPasswordRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/identity/forgot-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processForgot_Password(_response);
        });
    }

    protected processForgot_Password(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reset_Password(body: ResetPasswordRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/identity/reset-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReset_Password(_response);
        });
    }

    protected processReset_Password(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    like(subjectId: string, subjectType: LikeSubjectType, authorization: string): Promise<void> {
        let url_ = this.baseUrl + "/api/{subjectType}/{subjectId}/Likes";
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{SubjectId}", encodeURIComponent("" + subjectId));
        if (subjectType === undefined || subjectType === null)
            throw new Error("The parameter 'subjectType' must be defined.");
        url_ = url_.replace("{SubjectType}", encodeURIComponent("" + subjectType));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLike(_response);
        });
    }

    protected processLike(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    delete_Like(subjectId: string, subjectType: LikeSubjectType, authorization: string): Promise<void> {
        let url_ = this.baseUrl + "/api/{subjectType}/{subjectId}/Likes";
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined.");
        url_ = url_.replace("{SubjectId}", encodeURIComponent("" + subjectId));
        if (subjectType === undefined || subjectType === null)
            throw new Error("The parameter 'subjectType' must be defined.");
        url_ = url_.replace("{SubjectType}", encodeURIComponent("" + subjectType));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete_Like(_response);
        });
    }

    protected processDelete_Like(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param authorization (optional) 
     * @param body (optional) 
     * @return Success
     */
    get_Spots(authorization: string | undefined, body: GetSpotsQuery | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/spots";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_Spots(_response);
        });
    }

    protected processGet_Spots(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    add_Spot_Video(spotId: string, authorization: string, body: AddSpotVideoCommand | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/spots/{spotId}/spotVideos";
        if (spotId === undefined || spotId === null)
            throw new Error("The parameter 'spotId' must be defined.");
        url_ = url_.replace("{spotId}", encodeURIComponent("" + spotId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd_Spot_Video(_response);
        });
    }

    protected processAdd_Spot_Video(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    delete_Spot_Video(spotId: string, spotVideoId: string, authorization: string): Promise<void> {
        let url_ = this.baseUrl + "/api/spots/{spotId}/spotVideos/{spotVideoId}";
        if (spotId === undefined || spotId === null)
            throw new Error("The parameter 'spotId' must be defined.");
        url_ = url_.replace("{SpotId}", encodeURIComponent("" + spotId));
        if (spotVideoId === undefined || spotVideoId === null)
            throw new Error("The parameter 'spotVideoId' must be defined.");
        url_ = url_.replace("{SpotVideoId}", encodeURIComponent("" + spotVideoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete_Spot_Video(_response);
        });
    }

    protected processDelete_Spot_Video(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create_Spot(authorization: string, body: CreateTempSpotCommand | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TempSpots";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate_Spot(_response);
        });
    }

    protected processCreate_Spot(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    get_With_Verification(spotId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/TempSpots/{spotId}";
        if (spotId === undefined || spotId === null)
            throw new Error("The parameter 'spotId' must be defined.");
        url_ = url_.replace("{SpotId}", encodeURIComponent("" + spotId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_With_Verification(_response);
        });
    }

    protected processGet_With_Verification(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    vote(tempSpotId: string, authorization: string, body: VoteCommand | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/tempSpots/{tempSpotId}/vote";
        if (tempSpotId === undefined || tempSpotId === null)
            throw new Error("The parameter 'tempSpotId' must be defined.");
        url_ = url_.replace("{tempSpotId}", encodeURIComponent("" + tempSpotId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVote(_response);
        });
    }

    protected processVote(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    delete_Vote(tempSpotId: string, authorization: string): Promise<void> {
        let url_ = this.baseUrl + "/api/tempSpots/{tempSpotId}/vote";
        if (tempSpotId === undefined || tempSpotId === null)
            throw new Error("The parameter 'tempSpotId' must be defined.");
        url_ = url_.replace("{TempSpotId}", encodeURIComponent("" + tempSpotId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete_Vote(_response);
        });
    }

    protected processDelete_Vote(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class AddressDto implements IAddressDto {
    street?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.street = _data["street"];
            this.postalCode = _data["postalCode"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["postalCode"] = this.postalCode;
        data["city"] = this.city;
        data["country"] = this.country;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data; 
    }
}

export interface IAddressDto {
    street?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    latitude?: string | undefined;
    longitude?: string | undefined;
}

export class AddressFilter implements IAddressFilter {
    street?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;

    constructor(data?: IAddressFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.street = _data["street"];
            this.postalCode = _data["postalCode"];
            this.city = _data["city"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): AddressFilter {
        data = typeof data === 'object' ? data : {};
        let result = new AddressFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["postalCode"] = this.postalCode;
        data["city"] = this.city;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddressFilter {
    street?: string | undefined;
    postalCode?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
}

export class AddSpotVideoCommand implements IAddSpotVideoCommand {
    url?: string | undefined;

    constructor(data?: IAddSpotVideoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): AddSpotVideoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddSpotVideoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        return data; 
    }
}

export interface IAddSpotVideoCommand {
    url?: string | undefined;
}

export class CommentCommand implements ICommentCommand {
    text?: string | undefined;

    constructor(data?: ICommentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CommentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CommentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        return data; 
    }
}

export interface ICommentCommand {
    text?: string | undefined;
}

export enum CommentSubjectType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class CreateTempSpotCommand implements ICreateTempSpotCommand {
    name?: string | undefined;
    description?: string | undefined;
    address?: AddressDto;
    surfaceScore?: number;
    obstacles?: ObstaclesDto;
    images?: Image[] | undefined;

    constructor(data?: ICreateTempSpotCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.address = _data["address"] ? AddressDto.fromJS(_data["address"]) : <any>undefined;
            this.surfaceScore = _data["surfaceScore"];
            this.obstacles = _data["obstacles"] ? ObstaclesDto.fromJS(_data["obstacles"]) : <any>undefined;
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(Image.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateTempSpotCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTempSpotCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["surfaceScore"] = this.surfaceScore;
        data["obstacles"] = this.obstacles ? this.obstacles.toJSON() : <any>undefined;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateTempSpotCommand {
    name?: string | undefined;
    description?: string | undefined;
    address?: AddressDto;
    surfaceScore?: number;
    obstacles?: ObstaclesDto;
    images?: Image[] | undefined;
}

export class EditCommentCommand implements IEditCommentCommand {
    newText?: string | undefined;

    constructor(data?: IEditCommentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newText = _data["newText"];
        }
    }

    static fromJS(data: any): EditCommentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EditCommentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newText"] = this.newText;
        return data; 
    }
}

export interface IEditCommentCommand {
    newText?: string | undefined;
}

export class ForgotPasswordRequest implements IForgotPasswordRequest {
    email!: string;

    constructor(data?: IForgotPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ForgotPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }
}

export interface IForgotPasswordRequest {
    email: string;
}

export class GetSpotsQuery implements IGetSpotsQuery {
    spotSearchFilter?: SpotSearchFilter;

    constructor(data?: IGetSpotsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.spotSearchFilter = _data["spotSearchFilter"] ? SpotSearchFilter.fromJS(_data["spotSearchFilter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSpotsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetSpotsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["spotSearchFilter"] = this.spotSearchFilter ? this.spotSearchFilter.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetSpotsQuery {
    spotSearchFilter?: SpotSearchFilter;
}

export class Image implements IImage {
    url?: string | undefined;

    constructor(data?: IImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Image {
        data = typeof data === 'object' ? data : {};
        let result = new Image();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        return data; 
    }
}

export interface IImage {
    url?: string | undefined;
}

export enum LikeSubjectType {
    _0 = 0,
    _1 = 1,
    _3 = 3,
}

export class ObstaclesDto implements IObstaclesDto {
    ledge?: boolean;
    stairs?: boolean;
    quater?: boolean;
    kicker?: boolean;
    downhill?: boolean;
    rail?: boolean;
    bank?: boolean;
    flatground?: boolean;
    manualpad?: boolean;
    skatepark?: boolean;

    constructor(data?: IObstaclesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ledge = _data["ledge"];
            this.stairs = _data["stairs"];
            this.quater = _data["quater"];
            this.kicker = _data["kicker"];
            this.downhill = _data["downhill"];
            this.rail = _data["rail"];
            this.bank = _data["bank"];
            this.flatground = _data["flatground"];
            this.manualpad = _data["manualpad"];
            this.skatepark = _data["skatepark"];
        }
    }

    static fromJS(data: any): ObstaclesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ObstaclesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ledge"] = this.ledge;
        data["stairs"] = this.stairs;
        data["quater"] = this.quater;
        data["kicker"] = this.kicker;
        data["downhill"] = this.downhill;
        data["rail"] = this.rail;
        data["bank"] = this.bank;
        data["flatground"] = this.flatground;
        data["manualpad"] = this.manualpad;
        data["skatepark"] = this.skatepark;
        return data; 
    }
}

export interface IObstaclesDto {
    ledge?: boolean;
    stairs?: boolean;
    quater?: boolean;
    kicker?: boolean;
    downhill?: boolean;
    rail?: boolean;
    bank?: boolean;
    flatground?: boolean;
    manualpad?: boolean;
    skatepark?: boolean;
}

export class ObstaclesFilter implements IObstaclesFilter {
    ledge?: boolean | undefined;
    stairs?: boolean | undefined;
    quater?: boolean | undefined;
    kicker?: boolean | undefined;
    downhill?: boolean | undefined;
    rail?: boolean | undefined;
    bank?: boolean | undefined;
    flatground?: boolean | undefined;
    manualpad?: boolean | undefined;
    skatepark?: boolean | undefined;

    constructor(data?: IObstaclesFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ledge = _data["ledge"];
            this.stairs = _data["stairs"];
            this.quater = _data["quater"];
            this.kicker = _data["kicker"];
            this.downhill = _data["downhill"];
            this.rail = _data["rail"];
            this.bank = _data["bank"];
            this.flatground = _data["flatground"];
            this.manualpad = _data["manualpad"];
            this.skatepark = _data["skatepark"];
        }
    }

    static fromJS(data: any): ObstaclesFilter {
        data = typeof data === 'object' ? data : {};
        let result = new ObstaclesFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ledge"] = this.ledge;
        data["stairs"] = this.stairs;
        data["quater"] = this.quater;
        data["kicker"] = this.kicker;
        data["downhill"] = this.downhill;
        data["rail"] = this.rail;
        data["bank"] = this.bank;
        data["flatground"] = this.flatground;
        data["manualpad"] = this.manualpad;
        data["skatepark"] = this.skatepark;
        return data; 
    }
}

export interface IObstaclesFilter {
    ledge?: boolean | undefined;
    stairs?: boolean | undefined;
    quater?: boolean | undefined;
    kicker?: boolean | undefined;
    downhill?: boolean | undefined;
    rail?: boolean | undefined;
    bank?: boolean | undefined;
    flatground?: boolean | undefined;
    manualpad?: boolean | undefined;
    skatepark?: boolean | undefined;
}

export class Pagination implements IPagination {
    page?: number;
    perPage?: number;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.perPage = _data["perPage"];
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["perPage"] = this.perPage;
        return data; 
    }
}

export interface IPagination {
    page?: number;
    perPage?: number;
}

export class RegisterRequest implements IRegisterRequest {
    email!: string;
    userName!: string;
    password!: string;
    confirmPassword!: string;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data; 
    }
}

export interface IRegisterRequest {
    email: string;
    userName: string;
    password: string;
    confirmPassword: string;
}

export class ResetPasswordRequest implements IResetPasswordRequest {
    email!: string;
    token!: string;
    password!: string;
    confirmPassword!: string;

    constructor(data?: IResetPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.token = _data["token"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["token"] = this.token;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data; 
    }
}

export interface IResetPasswordRequest {
    email: string;
    token: string;
    password: string;
    confirmPassword: string;
}

export enum SortBy {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class SpotSearchFilter implements ISpotSearchFilter {
    minSpotVideosCount?: number | undefined;
    maxSpotVideosCount?: number | undefined;
    sortBy?: SortBy;
    name?: string | undefined;
    minSurfaceScore?: number | undefined;
    maxSurfaceScore?: number | undefined;
    addressFilter?: AddressFilter;
    obstaclesFilter?: ObstaclesFilter;
    pagination?: Pagination;

    constructor(data?: ISpotSearchFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minSpotVideosCount = _data["minSpotVideosCount"];
            this.maxSpotVideosCount = _data["maxSpotVideosCount"];
            this.sortBy = _data["sortBy"];
            this.name = _data["name"];
            this.minSurfaceScore = _data["minSurfaceScore"];
            this.maxSurfaceScore = _data["maxSurfaceScore"];
            this.addressFilter = _data["addressFilter"] ? AddressFilter.fromJS(_data["addressFilter"]) : <any>undefined;
            this.obstaclesFilter = _data["obstaclesFilter"] ? ObstaclesFilter.fromJS(_data["obstaclesFilter"]) : <any>undefined;
            this.pagination = _data["pagination"] ? Pagination.fromJS(_data["pagination"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SpotSearchFilter {
        data = typeof data === 'object' ? data : {};
        let result = new SpotSearchFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minSpotVideosCount"] = this.minSpotVideosCount;
        data["maxSpotVideosCount"] = this.maxSpotVideosCount;
        data["sortBy"] = this.sortBy;
        data["name"] = this.name;
        data["minSurfaceScore"] = this.minSurfaceScore;
        data["maxSurfaceScore"] = this.maxSurfaceScore;
        data["addressFilter"] = this.addressFilter ? this.addressFilter.toJSON() : <any>undefined;
        data["obstaclesFilter"] = this.obstaclesFilter ? this.obstaclesFilter.toJSON() : <any>undefined;
        data["pagination"] = this.pagination ? this.pagination.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISpotSearchFilter {
    minSpotVideosCount?: number | undefined;
    maxSpotVideosCount?: number | undefined;
    sortBy?: SortBy;
    name?: string | undefined;
    minSurfaceScore?: number | undefined;
    maxSurfaceScore?: number | undefined;
    addressFilter?: AddressFilter;
    obstaclesFilter?: ObstaclesFilter;
    pagination?: Pagination;
}

export class TokenRequest implements ITokenRequest {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ITokenRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): TokenRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TokenRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ITokenRequest {
    email?: string | undefined;
    password?: string | undefined;
}

export class TokenResponse implements ITokenResponse {
    id?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    roles?: string[] | undefined;
    isVerified?: boolean;
    jwToken?: string | undefined;
    issuedOn?: Date;
    expiresOn?: Date;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.isVerified = _data["isVerified"];
            this.jwToken = _data["jwToken"];
            this.issuedOn = _data["issuedOn"] ? new Date(_data["issuedOn"].toString()) : <any>undefined;
            this.expiresOn = _data["expiresOn"] ? new Date(_data["expiresOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["email"] = this.email;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["isVerified"] = this.isVerified;
        data["jwToken"] = this.jwToken;
        data["issuedOn"] = this.issuedOn ? this.issuedOn.toISOString() : <any>undefined;
        data["expiresOn"] = this.expiresOn ? this.expiresOn.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ITokenResponse {
    id?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    roles?: string[] | undefined;
    isVerified?: boolean;
    jwToken?: string | undefined;
    issuedOn?: Date;
    expiresOn?: Date;
}

export class VoteCommand implements IVoteCommand {
    isReal?: boolean;

    constructor(data?: IVoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isReal = _data["isReal"];
        }
    }

    static fromJS(data: any): VoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new VoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isReal"] = this.isReal;
        return data; 
    }
}

export interface IVoteCommand {
    isReal?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}